from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister
from qiskit import execute, BasicAer

class DistanceBasedClassifier:

    def initialize_registers(self, num_registers):
        
        self.q = QuantumRegister(4)
        self.c = ClassicalRegister(4)
        self.ancilla_qubit = self.q[0]
        self.index_qubit = self.q[1]
        self.data_qubit = self.q[2]
        self.class_qubit = self.q[3]

    def create_circuit(self, angles):

        qc = QuantumCircuit(self.q, self.c)
        qc.h(self.ancilla_qubit)
        qc.h(self.index_qubit)
        qc.cx(self.ancilla_qubit, self.data_qubit)
        qc.u3(-angles[0], 0, 0, self.data_qubit)
        qc.cx(self.ancilla_qubit, self.data_qubit)
        qc.u3(angles[0], 0, 0, self.data_qubit)
        qc.barrier()
        qc.x(self.ancilla_qubit)
        qc.barrier()
        qc.ccx(self.ancilla_qubit, self.index_qubit, self.data_qubit)
        qc.barrier()
        qc.x(self.index_qubit)
        qc.barrier()
        qc.ccx(self.ancilla_qubit, self.index_qubit, self.data_qubit)
        qc.cx(self.index_qubit, self.data_qubit)
        qc.u3(angles[1], 0, 0, self.data_qubit)
        qc.cx(self.index_qubit, self.data_qubit)
        qc.u3(-angles[1], 0, 0, self.data_qubit)
        qc.ccx(self.ancilla_qubit, self.index_qubit, self.data_qubit)
        qc.cx(self.index_qubit, self.data_qubit)
        qc.u3(-angles[1], 0, 0, self.data_qubit)
        qc.cx(self.index_qubit, self.data_qubit)
        qc.u3(angles[1], 0, 0, self.data_qubit)
        qc.barrier()
        qc.cx(self.index_qubit, self.class_qubit)
        qc.barrier()
        qc.h(self.ancilla_qubit)
        qc.barrier()
        qc.measure(self.q, self.c)


        return qc

    def simulate(self, quantum_circuit):

        backend_sim = BasicAer.get_backend('qasm_simulator')

        job_sim = execute(quantum_circuit, backend_sim)

        return job_sim.result()

    def get_angles(self, test_vector, training_vectors):

        angles = []

        if test_vector == [0.853, 0.646]:
            angles.append(1.09873897/2)
        elif test_vector == [0.881, 0.472]:
            angles.append(0.983618352/2)
        else:
            print('No angle defined for this test vector.')

        if training_vectors[0] == [0, 1] and training_vectors[1] == [0.78861006, 0.61489363]:
            angles.append(1.3245021469658966/4)
        else:
            print('No angles defined for these training vectors.')

        return angles

    def interpret_results(self, result_counts):
        
        total_samples = sum(result_counts.values())
        post_select = lambda counts: [(state, occurences) for state, occurences in counts.items() if state[-1] == '0']
        postselection = dict(post_select(result_counts))
        postselected_samples = sum(postselection.values())

        print(f'Ancilla post-selection probability was found to be {postselected_samples/total_samples}')

        retrieve_class = lambda binary_class: [occurences for state, occurences in postselection.items() if state[0] == str(binary_class)]

        prob_class0 = sum(retrieve_class(0))/postselected_samples
        prob_class1 = sum(retrieve_class(1))/postselected_samples

        print(f'Probability for class 0 is {prob_class0}')
        print(f'Probability for class 1 is {prob_class1}')

        return prob_class0, prob_class1

    def classify(self, test_vector, training_set):

        training_vectors = [tuple_[0] for tuple_ in training_set]

        self.initialize_registers(num_registers=4)

        angles = self.get_angles(
                test_vector=test_vector,
                training_vectors=training_vectors
        )

        qc = self.create_circuit(angles=angles)

        result = self.simulate(qc)

        prob_class0, prob_class1 = self.interpret_results(result.get_counts(qc))

        if prob_class0 > prob_class1:
            return 0
        elif prob_class0 < prob_class1:
            return 1
        else:
            return 'inconclusive. 50/50 results'


if __name__ == "__main__":

    classifier = DistanceBasedClassifier()
    x_prime = [0.853, 0.646] 
    x_double_prime = [0.881, 0.472] 

    training_set = [
        ([0, 1], 0), 
        ([0.78861006, 0.61489363], 1) 
    ]

    print(f"Classifying x' = {x_prime} with noisy simulator backend")
    class_result = classifier.classify(test_vector=x_prime, training_set=training_set)
    print(f"Test vector x' was classified as class {class_result}\n")

    print('===============================================\n')

    print(f"Classifying x'' = {x_double_prime} with noisy simulator backend")
    class_result = classifier.classify(test_vector=x_double_prime, training_set=training_set)
    print(f"Test vector x'' was classified as class {class_result}")
